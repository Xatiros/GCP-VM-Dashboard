# cloudbuild.yaml (para el frontend, en la raíz del repo)
steps:
# Paso 0: Limpiar node_modules, package-lock.json, dist y caché npm
- name: 'gcr.io/cloud-builders/npm'
  entrypoint: 'sh'
  args: ['-c', 'rm -rf node_modules package-lock.json yarn.lock dist && npm cache clean --force'] 
  dir: '.'

# Paso 1: Instalar dependencias limpiamente
- name: 'gcr.io/cloud-builders/npm'
  args: ['install']
  dir: '.' 

# Paso 2: Construir la aplicación React
- name: 'gcr.io/cloud-builders/npm'
  args: ['run', 'build']
  dir: '.'

# Paso 3: Construir la imagen Docker de Nginx con los archivos de tu app
- name: 'gcr.io/cloud-builders/docker'
  args: [
    'build', 
    '-t', 
    'europe-southwest1-docker.pkg.dev/$PROJECT_ID/gcp-vm-dashboard-frontend/gcp-vm-dashboard-frontend:$COMMIT_SHA', 
    '.' 
  ]

# Paso 4: Subir la imagen a Artifact Registry
- name: 'gcr.io/cloud-builders/docker'
  args: [
    'push', 
    'europe-southwest1-docker.pkg.dev/$PROJECT_ID/gcp-vm-dashboard-frontend/gcp-vm-dashboard-frontend:$COMMIT_SHA'
  ]

# Paso 5: Desplegar la imagen en Cloud Run
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'gcloud'
  args: [
    'run', 'deploy', 'gcp-vm-dashboard-frontend-service', 
    '--image', 'europe-southwest1-docker.pkg.dev/$PROJECT_ID/gcp-vm-dashboard-frontend/gcp-vm-dashboard-frontend:$COMMIT_SHA',
    '--region', 'europe-southwest1', 
    '--platform', 'managed',
    '--allow-unauthenticated'
  ]
  env:
    - 'CLOUDSDK_COMPUTE_REGION=europe-southwest1'
images:
- 'europe-southwest1-docker.pkg.dev/$PROJECT_ID/gcp-vm-dashboard-frontend/gcp-vm-dashboard-frontend:$COMMIT_SHA'