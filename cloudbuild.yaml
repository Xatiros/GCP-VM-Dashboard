# cloudbuild.yaml
# Ubicación: gcp-vm-dashboard/cloudbuild.yaml (en la RAÍZ del proyecto)

steps:
# --- PASOS PARA EL BACKEND ---
# Paso 1 (Backend): Construir la imagen Docker del backend
- name: 'gcr.io/cloud-builders/docker'
  id: 'build-backend' 
  args: [
    'build', 
    '-t', 
    'europe-southwest1-docker.pkg.dev/$PROJECT_ID/gcp-vm-dashboard-repo/gcp-vm-dashboard-backend-service:$COMMIT_SHA', 
    '.' 
  ]
  dir: 'backend' 

# Paso 2 (Backend): Subir la imagen Docker del backend a Artifact Registry
- name: 'gcr.io/cloud-builders/docker'
  id: 'push-backend' 
  args: [
    'push', 
    'europe-southwest1-docker.pkg.dev/$PROJECT_ID/gcp-vm-dashboard-repo/gcp-vm-dashboard-backend-service:$COMMIT_SHA'
  ]
  waitFor: ['build-backend'] 

# Paso 3 (Backend): Desplegar el backend en Cloud Run
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'deploy-backend' 
  entrypoint: 'bash' # <-- CAMBIO: Usar bash como entrypoint
  args: [
    '-c', # <-- CAMBIO: Argumento para bash para ejecutar una cadena de comandos
    |
      # --- INICIO WORKAROUND para "defined without being used" ---
      # Esto fuerza a Cloud Build a reconocer el uso de las variables de secretEnv.
      # Estos 'echo' NO aparecerán en los logs de tu servicio de Cloud Run, solo en los logs de Cloud Build.
      echo "DEBUG: Usando _GOOGLE_CLIENT_ID: $MY_GOOGLE_CLIENT_ID"
      echo "DEBUG: Usando _JWT_SECRET: $MY_JWT_SECRET"
      # --- FIN WORKAROUND ---

      # Ahora ejecuta el comando gcloud run deploy real
      gcloud run deploy gcp-vm-dashboard-backend-service \
        --image europe-southwest1-docker.pkg.dev/$PROJECT_ID/gcp-vm-dashboard-repo/gcp-vm-dashboard-backend-service:$COMMIT_SHA \
        --region europe-southwest1 \
        --platform managed \
        --allow-unauthenticated \
        --service-account 780691668337-compute@developer.gserviceaccount.com \
        --set-env-vars=GOOGLE_CLIENT_ID=$$MY_GOOGLE_CLIENT_ID,JWT_SECRET=$$MY_JWT_SECRET,GCP_PROJECT_ID=$PROJECT_ID
  ]
  waitFor: ['push-backend'] 
  secretEnv: ['MY_GOOGLE_CLIENT_ID', 'MY_JWT_SECRET'] # <-- Mantenemos esto aquí, y los nombres deben coincidir con availableSecrets

# --- PASOS PARA EL FRONTEND ---
# Paso 4 (Frontend): Construir la imagen Docker del frontend
- name: 'gcr.io/cloud-builders/docker'
  id: 'build-frontend' 
  args: [
    'build', 
    '-t', 
    'europe-southwest1-docker.pkg.dev/$PROJECT_ID/gcp-vm-dashboard-frontend/gcp-vm-dashboard-frontend:$COMMIT_SHA', 
    '.' , 
    '--build-arg', 'VITE_APP_BACKEND_API_BASE_URL=https://gcp-vm-dashboard-backend-service-780691668337.europe-southwest1.run.app/api'
  ]
  dir: 'frontend' 

# Paso 5 (Frontend): Subir la imagen Docker del frontend a Artifact Registry
- name: 'gcr.io/cloud-builders/docker'
  id: 'push-frontend' 
  args: [
    'push', 
    'europe-southwest1-docker.pkg.dev/$PROJECT_ID/gcp-vm-dashboard-frontend/gcp-vm-dashboard-frontend:$COMMIT_SHA'
  ]
  waitFor: ['build-frontend'] 

# Paso 6 (Frontend): Desplegar el frontend en Cloud Run
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'deploy-frontend' 
  entrypoint: 'gcloud' 
  args: [
    'run', 'deploy', 'gcp-vm-dashboard-frontend-service', 
    '--image', 'europe-southwest1-docker.pkg.dev/$PROJECT_ID/gcp-vm-dashboard-frontend/gcp-vm-dashboard-frontend:$COMMIT_SHA', 
    '--region', 'europe-southwest1', 
    '--platform', 'managed',
    '--allow-unauthenticated', 
    '--set-env-vars', 'VITE_APP_BACKEND_API_BASE_URL=https://gcp-vm-dashboard-backend-service-780691668337.europe-southwest1.run.app/api'
  ]
  waitFor: ['push-frontend', 'deploy-backend'] 

# --- Definición de Secretos Globales (usados por --update-secrets) y Opciones Globales ---
images:
- 'europe-southwest1-docker.pkg.dev/$PROJECT_ID/gcp-vm-dashboard-backend/gcp-vm-dashboard-backend:$COMMIT_SHA'
- 'europe-southwest1-docker.pkg.dev/$PROJECT_ID/gcp-vm-dashboard-frontend/gcp-vm-dashboard-frontend:$COMMIT_SHA'

availableSecrets: 
  secretManager:
  # Los nombres de Secret Manager DEBEN ser 'my-google-client-id' y 'my-backend-jwt-secret'
  # Y los 'env' que aquí se definen (MY_GOOGLE_CLIENT_ID, MY_JWT_SECRET) se usarán con el prefijo $$ en los args
  - versionName: projects/$PROJECT_ID/secrets/my-google-client-id/versions/latest 
    env: 'MY_GOOGLE_CLIENT_ID' 
  - versionName: projects/$PROJECT_ID/secrets/my-backend-jwt-secret/versions/latest 
    env: 'MY_JWT_SECRET' 

options:
  logging: CLOUD_LOGGING_ONLY